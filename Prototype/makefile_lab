# Please run the clean command detailed at the bottom before running: make -f makefile_lab

CFLAGS = -pedantic -Wall -Wextra -Wno-unused-variable -Wno-unused-parameter
SDL_FLAGS = -I/opt/SDL/2.0.3/include -L/opt/SDL/2.0.3/lib
#TTF_FLAGS = -ISDL_ttf_lab/include -LSDL_ttf_lab/lib -Wl,-rpath,/home/msc15/jb15339/linux/git/verdant-octo-spork/Prototype/SDL_ttf_lab/lib -lSDL_ttf
LFLAGS = $(SDL_FLAGS) $(TTF_FLAGS) -Wl,-rpath,/opt/SDL/2.0.3/lib -lSDL2 -lm
DELETE = rm
DELETE_RECURSIVE = rm -r
# Once we have TTF working, just remove the comment mark from the TTF_FLAGS definition and it'll be ready to go. Currently only accepts an absolute path.
# Could make a shell script to pass in an absolute path for each individual computer.
# I asked Ian how to get ttf_lab working, and he wasn't able to do it either, due to this error... /bin/ld: cannot find -lSDL_ttf collect2: error: ld returned 1 exit status.

# List all the files here
#Add a /. after assets to copy only the contents inside, rather than the folder too.
ASSETS_CONTENTS = assets/.
OBJS = main.o init.o game.o world_generation.o game_objects.o AI.o UI.o generic.o controls.o graphics.o
BIN = bin
PROG = $(BIN)/Prototype
CXX = gcc

# top-level rule to create the program.
all: $(PROG)

# compiling other source files.
%.o: src/%.c src/%.h
	$(CXX) $(CFLAGS) $(LFLAGS) -c -s $<

# linking the program. | $(BIN) makes the bin/ directory if it does not yet exist.
$(PROG): $(OBJS) | $(BIN)
	$(CXX) $(OBJS) -o $(PROG) $(LFLAGS)

# makes the bin/ directory and copies assets to bin/ so we don't have to drag them in manually.
# $@ is merely a variable provided by makefile which effectively substitutes in the rule "$(BIN)".
$(BIN):
	mkdir $@
	cp -R $(ASSETS_CONTENTS) $@

# cleans everything that can be automatically recreated with "make".
# To do this, run the following command in verdant-octo-spork/Prototype: make -f makefile_lab clean
clean:
	$(DELETE_RECURSIVE) $(BIN)
	$(DELETE) *.o
